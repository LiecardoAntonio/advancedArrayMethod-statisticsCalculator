FCC Advanced Array Method - Statistics Calculator

CONTENT:
1. (RECALL) string.split('charOrRegex');
  > The .split() method takes a string and splits it into an array of strings. You can pass it a string of characters or a RegEx to use as a separator. For example, string.split(",") would split the string at each comma and return an array of strings.
  > ex:
  const array = value.split(/,\s*/g); //split string by commas.

2. (CONCEPT) The value of an input element is always a string, even if the input type is number.

3. (RECALL) Number(argument) constructor
  > the number constructor will convert the argument passed to it into a number datatype
  > The Number() constructor will return NaN (which stands for "not a number") if the value passed to it cannot be converted to a number.

4. (RECALL) array.map()
  > the .map() method can be used to make a collection into array datatype
  > The .map() method takes a callback function as its first argument. This callback function takes a few arguments, but the first one is the current element being processed. Here is an example:
  > ex:
  array.map(el => {
    el+=1;
  })

5. (RECALL) array.filter()
  > The .filter() method will allow you to filter elements out of an array, creating a new array in the process.
  > this method requires a callback function that return a boolean value, which indicates whether the element should be included in the new array
  > ex:
  array.filter(el => el>=3);

6. NaN datatype
  > NaN (not a number).
  > Note: we cannot compare a NaN (not a number) value to a itself. So if we have a NaN value and we want to check if it's a NaN value, we cannot do NaN==NaN. Instead we use isNaN() method, which returns boolean true if the argument is NaN.

7. (CONCEPT) method chaining
  > Array methods can often be chained together to perform multiple operations at once. 
  > ex:
  array.map().filter(); //The .map() method is called on the array, and then the .filter() method is called on the result of the .map() method. This is called method chaining.

8. array.reduce(() => {})
  > Arrays have another method, called .reduce(), which is perfect for summing all of the numbers in the list. The .reduce() method takes an array and applies a callback function to condense the array into a single value.
  > Like the other methods, .reduce() takes a callback. This callback, however, takes at least two parameters. The first is the accumulator, and the second is the current element in the array. The return value for the callback becomes the value of the accumulator on the next iteration.
  > The .reduce() method takes a second argument that is used as the initial value of the accumulator. Without a second argument, the .reduce() method uses the first element of the array as the accumulator, which can lead to unexpected results.To be safe, it's best to set an initial value. Here is an example of setting the initial value to an empty string:
  array.reduce((acc, el) => acc + el.toLowerCase(), "");

9. element onsubmit attribute
  > The onsubmit event attribute in HTML is triggered when a form is submitted. It is basically triggered when a form is submitted, either by clicking a submit button or using JavaScript.
  > by default the onsubmit attribute will triggers a page refresh after submit event happen. to prevent this we need to add return false; after the onsubmit action. example:
  <form onsubmit="calculate(); return false;">

10. array.toSorted(() => {});
  > The .sort() method mutates the original array - in other words, it modifies the order of the elements directly. This is generally considered bad practice, as it can result in unexpected side effects. Instead, you should use the .toSorted() method, which creates a new array. 

11. Object.values()
  > Object.values() is a built-in method that returns an array of the values of an object's own enumerable property values, in the same order as provided by a for...in loop. This is useful for retrieving only the values without the keys.
  > ex:
  const person = {
    name: 'Antonio',
    age: 23,
    city: 'Jakarta'
  };
  const values = Object.values(person);
  console.log(values); // Output: ['Antonio', 23, 'Jakarta']

12. Set() constructor
  > A Set is a data structure that only allows unique values. If you pass an array into the Set constructor, it will remove any duplicate values.
  > ex:
  const set1 = new Set([1, 2, 2, 3, 4, 5]);
  console.log(set1)

13. Object.keys()
  > Object.keys() is a method that returns an array of the object's own enumerable property names (keys). The order of the keys is the same as that given by a for...in loop (except it only returns the object's own properties, not inherited ones).
  > ex:
  const person = {
    name: 'Antonio',
    age: 23,
    city: 'Jakarta'
  };

  const keys = Object.keys(person);
  console.log(keys); // Output: ['name', 'age', 'city']

14. Math.pow(base, exponent);
  > JavaScript has a built-in Math.pow() function that can be used to calculate exponents.
  > ex:
  const base = 4;
  const exponent = 0.5;
  // returns 2
  Math.pow(base, exponent);

15. Math.sqrt()
  > The Math object has a .sqrt() method specifically for finding the square root of a number.